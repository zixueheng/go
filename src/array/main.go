package main

import "fmt"

// 数组是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。因为数组的长度是固定的，所以在Go语言中很少直接使用数组。
// 数组的声明语法如下：
// var 数组变量名 [元素数量]Type

func main() {
	var a [3]int             // 定义三个整数的数组
	fmt.Println(a[0])        // 打印第一个元素
	fmt.Println(a[len(a)-1]) // 打印最后一个元素
	// 打印索引和元素
	for i, v := range a {
		fmt.Printf("%d %d\n", i, v)
	}
	// 仅打印元素
	for _, v := range a {
		fmt.Printf("%d\n", v)
	}

	// 默认情况下，数组的每个元素都会被初始化为元素类型对应的零值，对于数字类型来说就是 0，同时也可以使用数组字面值语法，用一组值来初始化数组:
	var q [3]int = [3]int{1, 2, 3}
	var r = [3]int{1, 2} //使用类型推到 左侧的 [3]int可以省略
	fmt.Println(q, r)
	// [1 2 3] [1 2 0]

	// 如果在数组长度的位置出现“...”省略号，则表示数组的长度是根据初始化值的个数来计算
	s := [...]int{1, 2, 3}
	fmt.Println(s)
	// [1 2 3]

	// 声明一个二维整型数组，两个维度的长度分别是 4 和 2
	var array [4][2]int
	// 使用数组字面量来声明并初始化一个二维整型数组
	array = [4][2]int{{10, 11}, {20, 21}, {30, 31}, {40, 41}}
	fmt.Println(array)
	// 声明并初始化数组中索引为 1 和 3 的元素
	array = [4][2]int{1: {20, 21}, 3: {40, 41}}
	fmt.Println(array)
	// 声明并初始化数组中指定的元素
	array = [4][2]int{1: {0: 20}, 3: {1: 41}}
	fmt.Println(array)
	// [[10 11] [20 21] [30 31] [40 41]]
	// [[0 0] [20 21] [0 0] [40 41]]
	// [[0 0] [20 0] [0 0] [0 41]]
}
